Gezeigt werden soll: tail (init xs) = init (tail xs)

# Definitionen von haskell.org
# tail (_ : xs) = xs 				*t1
#
# init [x] = [] 				*i1
# init (x:xs) = x : init xs			*i2
#

#Induktionsanfang: 
tail(init (x:y:[])) 	= tail(x: init [y])
			= tail(x:[]) 		*i2
			= []			*t1
init(tail (x:y:[])) 	= init(y:[])		*t1
			= []			*i1

#Induktionsvoraussetzung:
tail (init xs) = init (tail xs)) xs hat mindestens zwei Elemente

#Induktionsbehauptung:
tail (init (x:xs)) = init (tail (x:xs))

#Induktionsschritt:
tail (init (x:xs) 	= tail (x: init(xs))	*i2
			= init xs 		*t1
init (tail (x:xs)) 	= init xs		*t1

gleich dem was zu zeigen war. -> bewiesen.





#Warum nicht verzichtet werden kann:
- beide Funktionen entfernen jeweils ein Element aus der Liste
- wenn beide Funktionen "gleichzeitig" angewendet werden, dann muessen auch mindestens 2 Elemente vorhanden sein, damit der Beweis korrekt durchgefuehrt werden kann


